<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>infrastructure on Plex Engineering</title><link>https://plexsystems.github.io/categories/infrastructure/</link><description>Recent content in infrastructure on Plex Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://plexsystems.github.io/categories/infrastructure/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying Atlantis for Azure DevOps onto Kubernetes</title><link>https://plexsystems.github.io/posts/deploying-infrastructure-azure/</link><pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate><guid>https://plexsystems.github.io/posts/deploying-infrastructure-azure/</guid><description>At Plex, our initial adoption of Terraform was relatively painless. There weren&amp;rsquo;t many teams writing infrastructure as code, and most of the changes that were being deployed through Terraform were new pieces of infrastructure that didn&amp;rsquo;t have any dependencies.
As the number of teams using Terraform and managing their own infrastructure grew, it became apparent that we needed to start putting some processes in place for a few reasons.
Collaboration was difficult In order for an engineer to verify their Terraform changes, they needed to be able to run terraform plan against live infrastructure.</description></item></channel></rss>